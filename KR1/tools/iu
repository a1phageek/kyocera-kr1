#!/usr/bin/perl
#
#	image usages -- This program reports the usage statistics of all symbol types.
#
#       Symbol meanings:
#
#           "A" The symbol's value is absolute, and will not be changed by fur-
#               ther linking.
#
#           "B" The symbol is in the uninitialized data section (known as BSS).
#
#           "C" The symbol is common.  Common symbols are  uninitialized  data.
#               When  linking, multiple common symbols may appear with the same
#               name.  If the symbol is defined anywhere,  the  common  symbols
#               are treated as undefined references.
#
#           "D" The symbol is in the initialized data section.
#
#           "G" The symbol is in an initialized data section for small objects.
#               Some object file formats permit more efficient access to  small
#               data  objects,  such  as  a global int variable as opposed to a
#               large global array.
#
#           "I" The symbol is an indirect reference to another symbol.  This is
#               a GNU extension to the a.out object file format which is rarely
#               used.
#
#           "N" The symbol is a debugging symbol.
#
#           "R" The symbol is in a read only data section.
#
#           "S" The symbol is  in  an  uninitialized  data  section  for  small
#               objects.
#
#           "T" The symbol is in the text (code) section.
#
#           "U" The symbol is undefined.
#
#           "V" The  symbol  is  a  weak object.  When a weak defined symbol is
#               linked with a normal defined symbol, the normal defined  symbol
#               is  used with no error.  When a weak undefined symbol is linked
#               and the symbol is not defined, the value  of  the  weak  symbol
#               becomes zero with no error.
#
#           "W" The  symbol  is  a  weak  symbol that has not been specifically
#               tagged as a weak object symbol.  When a weak defined symbol  is
#               linked  with a normal defined symbol, the normal defined symbol
#               is used with no error.  When a weak undefined symbol is  linked
#               and  the  symbol  is  not defined, the value of the weak symbol
#               becomes zero with no error.
#
#           "-" The symbol is a stabs symbol in an a.out object file.  In  this
#               case,  the  next  values printed are the stabs other field, the
#               stabs desc field, and the stab type.  Stabs symbols are used to
#               hold debugging information.
#
#           "?" The symbol type is unknown, or object file format specific.

sub help
{
	print "Usage: tools/iu [-r|-l]\n";
	print "          -r   show runtime\n";
	print "          -l   show loader\n";
	exit;
}


# main()

	$argv1 = shift;

	$nm = "mips-linux-nm -n ";

	if ( $argv1 eq "" || $argv1 eq "-r" )
	{
		# for ROME driver
		$dirRE865X = "linux-2.4.x/drivers/net/re865x/";
		$fileSystemMap = "linux-2.4.x/System.map";
	}
	elsif ( $argv1 eq "-l" )
	{
		# for loader
		$dirRE865X = "loader_srcroot/";
		$fileSystemMap = "loader_srcroot/ldr.map";

		# 'ldr.map' is generated by
		#    mips-uclibc-nm ldr.out | grep -v '\(compiled\)\|\(\.o$\)\|\( [aUw] \)\|\(\.\.ng$\)\|\(LASH[RL]DI\)' | sort > ldr.map
		$cmd = "$nm $dirRE865X/ldr.out | grep -v '\(compiled\)\|\(\.o$\)\|\( [aUw] \)\|\(\.\.ng$\)\|\(LASH[RL]DI\)' | sort > $fileSystemMap";
		`$cmd`;
	}
	else
	{
		help();
	}

	$textRankNO = 20;
	$initedRankNO = 20;
	$bssRankNO = 20;

	@textRank = ();
	@bssRank = ();
	@initedRank = ();

	#######################################################################
	#
	# First, we collect text and data symbols in RTL8651 objects.
	#
	@symbols = ( "--------" );
	@files = ( "--------" ); 
	@symbol_size = ( -1 );
	$count = 0;
	$dirRE865XMask = "." x length($dirRE865X); # to strip leading directory name
	@objs = split( /\n/, `find $dirRE865X -name "*.o" | grep -v tblDrvTest |grep -v re865x.o` );
	foreach $obj (@objs)
	{
		open( NM, "$nm $obj |" ) || die "$nm $obj : $!";

		$_ = $obj;
		s/$dirRE865XMask//;
		$obj = $_;

		while( $line = <NM> )
		{
			( $addr, $type, $symbol ) = split( /\s/, $line );
			if ( $type =~ /[AaBbCcDdGgRrSsTt]/ )
			{
				push @symbols, $symbol;
				push @files, $obj;
				$count++;
			}
		}
		close( NM );
	}
	# print join("\n", @files); exit;

	#######################################################################
	#
	#	Load System.map file, and generate statistic.
	#
	@text_size = ();
	@bss_size = ();
	@inited_size = ();
	$prev_addr = 0;
	open( SYSMAP, "< $fileSystemMap" ) || die "$fileSystemMap: $!";
	while( $line = <SYSMAP> )
	{
		( $addr, $type, $symbol ) = split( /\s/, $line );

		if ( hex( $addr ) < 0x80000000 ) { next; }

		# If the previous symbol is RTL8651 symbol, calculate the size.
		if ( $prev_addr > 0 )
		{
			$size = hex($addr) - hex($prev_addr);
			printf ("%08X $prev_type $prev_symbol (%s)\n", $size, $files[$prev_index] );

			$symbol_size[$prev_index] = $size;

			if ( $prev_type =~ /[Tt]/ )
			{
				#
				# TEXT
				#
				$text_size{$files[$prev_index]} += $size;

				# sort
				$textRank[$textRankNO] = $prev_index;
				for( $i = $textRankNO; $i >= 0; $i-- )
				{
					for( $j = $i-1; $j >= 0; $j-- )
					{
						# print $symbol_size[$textRank[$i]].">".$symbol_size[$textRank[$j]];
						if ( $symbol_size[$textRank[$i]] > $symbol_size[$textRank[$j]] )
						{
							# swap !
							$temp = $textRank[$i];
							$textRank[$i] = $textRank[$j];
							$textRank[$j] = $temp;
						}
						else
						{
							last;
						}
					}
				}
				# for( $i = 0; $i <= $textRankNO; $i++ ) { printf("%d-%d ",$i,$textRank[$i]); }; print "\n";
				# end of sort
			}
			elsif ( $prev_type =~ /[BbCcSs]/ )
			{
				#
				# BSS
				#
				$bss_size{$files[$prev_index]} += $size;

				# sort
				$bssRank[$bssRankNO] = $prev_index;
				for( $i = $bssRankNO; $i >= 0; $i-- )
				{
					for( $j = $i-1; $j >= 0; $j-- )
					{
						# print $symbol_size[$bssRank[$i]].">".$symbol_size[$bssRank[$j]];
						if ( $symbol_size[$bssRank[$i]] > $symbol_size[$bssRank[$j]] )
						{
							# swap !
							$temp = $bssRank[$i];
							$bssRank[$i] = $bssRank[$j];
							$bssRank[$j] = $temp;
						}
						else
						{
							last;
						}
					}
				}
				# for( $i = 0; $i <= $bssRankNO; $i++ ) { printf("%d-%d ",$i,$bssRank[$i]); }; print "\n";
				# end of sort
			}
			else # Initialized data
			{
				#
				# Inited Data
				#
				$inited_size{$files[$prev_index]} += $size;

				# print "INIT DATA\n";

				# sort
				$initedRank[$initedRankNO] = $prev_index;
				for( $i = $initedRankNO; $i >= 0; $i-- )
				{
					for( $j = $i-1; $j >= 0; $j-- )
					{
						# print $symbol_size[$initedRank[$i]].">".$symbol_size[$initedRank[$j]]." ";
						if ( $symbol_size[$initedRank[$i]] > $symbol_size[$initedRank[$j]] )
						{
							# swap !
							$temp = $initedRank[$i];
							$initedRank[$i] = $initedRank[$j];
							$initedRank[$j] = $temp;
						}
						else
						{
							last;
						}
					}
				}
				# for( $i = 0; $i <= $initedRankNO; $i++ ) { printf("%d-%d ",$i,$initedRank[$i]); }; print "\n";
				# end of sort
			}
		}

		# check if this symbol is RTL8651 symbol ?
		$found = 0;
		$index = 0;
		foreach $sym ( @symbols )
		{
			if ( $sym eq $symbol )
			{
				$found++;
				$count++;

				$prev_addr = $addr;
				$prev_type = $type;
				$prev_symbol = $symbol;
				$prev_index = $index;
				last;
			}

			$index++;
		}
		if ( $found == 0 )
		{
			$prev_addr = 0;
			$prev_type = "";
			$prev_symbol = "";
			$prev_index = 0;
		}

	}
	close( SYSMAP );

	############################################################################
	#
	# summary text and date size
	#
	%sumSize = {};
	foreach $file ( keys %text_size )
	{
		$size = $text_size{$file};
		$sumSize{$file} += $size;
		$total_text_size += $size;
	}
	foreach $file ( keys %bss_size )
	{
		$size = $bss_size{$file};
		$sumSize{$file} += $size;
		$total_bss_size += $size;
	}
	foreach $file ( keys %inited_size )
	{
		$size = $inited_size{$file};
		$sumSize{$file} += $size;
		$total_inited_size += $size;
	}

	############################################################################
	#
	# Dmup results ...............
	#
	#

	#
	#	Ranking
	#
	if ( 1 )
	{
		printf( "\nRanking size of text:\n" );
		printf( "%8s %s\n", "TEXT", "Function" );
		for( $i = 0; $i < $textRankNO; $i++ )
		{
			$size = $symbol_size[$textRank[$i]];
			$symbol = $symbols[$textRank[$i]];
			printf( "%08X %s\n", $size, $symbol );
		}
		printf( "\nRanking size of inited data:\n" );
		printf( "%8s %s\n", "Inited", "Variable" );
		for( $i = 0; $i < $initedRankNO; $i++ )
		{
			$size = $symbol_size[$initedRank[$i]];
			$symbol = $symbols[$initedRank[$i]];
			printf( "%08X %s\n", $size, $symbol );
		}
		printf( "\nRanking size of bss data:\n" );
		printf( "%8s %s\n", "BSS", "Variable" );
		for( $i = 0; $i < $bssRankNO; $i++ )
		{
			$size = $symbol_size[$bssRank[$i]];
			$symbol = $symbols[$bssRank[$i]];
			printf( "%08X %s\n", $size, $symbol );
		}
		printf( "\n" );
	}

	if ( 0 )
	{
		#
		# dump text size (group by file)
		#
		print "\n";
		printf( "%8s %s\n", "TEXT", "Filename" );
		foreach $file ( keys %text_size )
		{
			$size = $text_size{$file};
			printf( "%08X %s\n", $size, $file );
		}
		#
		# dump bss size (group by file)
		#
		print "\n";
		printf( "%8s %s\n", "BSS", "Filename" );
		foreach $file ( keys %bss_size )
		{
			$size = $bss_size{$file};
			printf( "%08X %s\n", $size, $file );
		}
		#
		# dump nitedss size (group by file)
		#
		print "\n";
		printf( "%8s %s\n", "Inited", "Filename" );
		foreach $file ( keys %inited_size )
		{
			$size = $inited_size{$file};
			printf( "%08X %s\n", $size, $file );
		}
	}

	#
	# dump text and data size (group by file)
	#
	if ( 1 )
	{
		print "\n";
		printf( "%8s +%8s +%8s = %8s  %s\n", "TEXT", "Inited", "BSS", "SumSize", "Filename" );
		foreach $file ( keys %sumSize )
		{
			printf( "%8X  %8X  %8X   %8s  %s\n", $text_size{$file}, $inited_size{$file}, $bss_size{$file}, (int($sumSize{$file}/1024))."K", $file );
		}
	}

	#
	# brief summary
	#
	if ( 1 )
	{
		printf( "\n" );
		printf( "Summary:\n" );
		printf( "  TEXT   size: 0x%08X (%4dK)\n", $total_text_size, $total_text_size/1024 );
		# printf( "  RODATA size: 0x%08X (%4dK)\n", $total_rodata_size, $total_rodata_size/1024 );
		printf( "  Inited size: 0x%08X (%4dK)\n", $total_inited_size, $total_inited_size/1024 );
		printf( "  BSS    size: 0x%08X (%4dK)\n", $total_bss_size, $total_bss_size/1024 );

		printf( "\n" );
		printf( "  Flash Usage (TEXT+Inited     ): 0x%08X (%4dK)\n", 
			$total_text_size+$total_inited_size, 
			($total_text_size+$total_inited_size)/1024 );
		printf( "  SDRAM Usage (TEXT+Inited+BSS ): 0x%08X (%4dK)\n", 
			$total_text_size+$total_inited_size+$total_bss_size,
			($total_text_size+$total_inited_size+$total_bss_size)/1024 );
	}
